input {
    exec {
        type => "metrics"
        command  => "curl -s http://p01001533040197.cern.ch:8088/ws/v1/cluster/metrics"
        codec => "json"
        interval => "5"
    }
    exec {
        type => "nodes"
        command  => "curl -s http://p01001533040197.cern.ch:8088/ws/v1/cluster/nodes?state=RUNNING"
        interval => "5"
        codec => "json"
    }
    exec {
        type => "apps"
        command  => "curl -s http://p01001533040197.cern.ch:8088/ws/v1/cluster/apps?state=RUNNING"
        interval => "5"
        codec => "json"
    }
   exec {
        command  => "curl -s http://p01001533040197.cern.ch:8088/ws/v1/cluster/scheduler"
        codec => "json"
        type => "sched"
        interval => "5"
    }

}

filter {
  if [type] == "metrics"
  {
  ruby {
  code => "require 'digest/sha1';
           require 'rubygems';
           require 'json';
           event.to_hash.clone.each_value{|v|
             if v.is_a? Hash
               v.each_pair{|k,v|
                 event[k] = v
                }
             end
           };"
  remove_field => ['host','command','clusterMetrics']
  }
  ruby {
  code => "
           event['availableMB']=Integer(event['availableMB']) * 1024 * 1024
           event['allocatedMB']=Integer(event['allocatedMB']) * 1024 * 1024
           event['totalMB']=Integer(event['totalMB']) * 1024 * 1024
           event['reservedMB']=Integer(event['reservedMB']) * 1024 * 1024
          "
       }
  }

 if [type] == "nodes"
  {
       split {
          field => "nodes[node]"
          remove_field => [ "command" ]
       }
       ruby {
          code => "
                   event['[nodes][node][availMemoryMB]']=Integer(event['[nodes][node][availMemoryMB]']) * 1024 * 1024
                   event['[nodes][node][usedMemoryMB]']=Integer(event['[nodes][node][usedMemoryMB]']) * 1024 * 1024
                  "
       }
  }

 if [type] == "apps"
  {
       split {
          field => "apps[app]"
          remove_field => [ "command" ]
       }
       ruby {
          code => "
                   event['[apps][app][allocatedMB]']=Integer(event['[apps][app][allocatedMB]']) * 1024 * 1024
                   event['[apps][app][preemptedResourceMB]']=Integer(event['[apps][app][preemptedResourceMB]']) * 1024 * 1024
                  "
       }
  }

if [type] == "sched"
  {
  ruby {
  code => "require 'digest/sha1';
           require 'rubygems';
           require 'json';
           event.to_hash.clone.each_value{|v|
             if v.is_a? Hash
               v.each_pair{|k,v|
                 event[k] = v
                }
             end
           };"
  remove_field => ['host','command','scheduler']
  }

  ruby {
  code => "require 'digest/sha1';
           require 'rubygems';
           require 'json';
           event.to_hash.clone.each_value{|v|
             if v.is_a? Hash
               v.each_pair{|k,v|
                 event[k] = v
                }
             end
           };"
  remove_field => ['host','command','schedulerInfo']
  }


  split {
         field => "rootQueue[childQueues]"
         remove_field => [ "command" ]
  }

#  mutate {
#         add_field => { "tag" => "sched" }
#  }

  }

}

output {
    if [type] == "metrics"
    {
    elasticsearch {
        index => "cmetrics-l"
        document_type => "log"
        codec => "json" 
        hosts  => "itdb-es-dev.cern.ch"
    }
    }

    if [type] == "nodes"
    {
    elasticsearch {
        index => "nodes-l"
        document_type => "log"
        codec => "json"
        hosts  => "itdb-es-dev.cern.ch"
    }
    }

    if [type] == "apps"
    {
    elasticsearch {
        index => "apps-l"
        document_type => "log"
        codec => "json"
        hosts  => "itdb-es-dev.cern.ch"
    }
    }

    if [type] == "fairScheduler"
    {
    elasticsearch {
        index => "sched-l"
        document_type => "log"
        codec => "json"
        hosts  => "itdb-es-dev.cern.ch"
    }
    }
}
